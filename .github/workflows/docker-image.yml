name: bilibili-daily-task

on:
  workflow_dispatch: # 手动触发
  schedule: # 计划任务触发
    - cron: '0 16 * * *'
    # cron表达式，时区是UTC时间，比我们早8小时，如上所表示的是每天0点0分（16+8=24点整）
    # 建议每个人通过设置名称为 Production 的 GitHub Environments 来设定为自己的目标运行时间（详细设置方法见文档说明）

env:
  ASPNETCORE_ENVIRONMENT: ${{ secrets.ENV }} # 运行环境
  Ray_BiliBiliCookies__1: ${{ secrets.COOKIESTR }}
  Ray_BiliBiliCookies__2: ${{ secrets.COOKIESTR_2 }}
  Ray_BiliBiliCookies__3: ${{ secrets.COOKIESTR_3 }}
  # 推送：
  Ray_Serilog__WriteTo__3__Args__botToken: ${{ secrets.PUSHTGTOKEN }} # Telegram
  Ray_Serilog__WriteTo__3__Args__chatId: ${{ secrets.PUSHTGCHATID }}
  Ray_Serilog__WriteTo__3__Args__restrictedToMinimumLevel: ${{ secrets.PUSHTGLEVEL }}
  Ray_Serilog__WriteTo__4__Args__webHookUrl: ${{ secrets.PUSHWEIXINURL }} # 企业微信
  Ray_Serilog__WriteTo__4__Args__restrictedToMinimumLevel: ${{ secrets.PUSHWEIXINLEVEL }}
  Ray_Serilog__WriteTo__5__Args__webHookUrl: ${{ secrets.PUSHDINGURL }} # 钉钉
  Ray_Serilog__WriteTo__5__Args__restrictedToMinimumLevel: ${{ secrets.PUSHDINGLEVEL }}
  Ray_Serilog__WriteTo__6__Args__scKey: ${{ secrets.PUSHSCKEY }} # Server酱
  Ray_Serilog__WriteTo__6__Args__turboScKey: ${{ secrets.PUSHSERVERTSCKEY }}
  Ray_Serilog__WriteTo__6__Args__restrictedToMinimumLevel: ${{ secrets.PUSHSERVERLEVEL }}
  Ray_Serilog__WriteTo__7__Args__sKey: ${{ secrets.PUSHCOOLSKEY }} # 酷推
  Ray_Serilog__WriteTo__7__Args__restrictedToMinimumLevel: ${{ secrets.PUSHCOOLLEVEL }}
  Ray_Serilog__WriteTo__8__Args__api: ${{ secrets.PUSHOTHERAPI }} # 自定义api
  Ray_Serilog__WriteTo__8__Args__placeholder: ${{ secrets.PUSHOTHERPLACEHOLDER }}
  Ray_Serilog__WriteTo__8__Args__bodyJsonTemplate: ${{ secrets.PUSHOTHERBODYJSONTEMPLATE }}
  Ray_Serilog__WriteTo__8__Args__restrictedToMinimumLevel: ${{ secrets.PUSHOTHERLEVEL }}
  Ray_Serilog__WriteTo__9__Args__token: ${{ secrets.PUSHPLUSTOKEN }} # PushPlus
  Ray_Serilog__WriteTo__9__Args__topic: ${{ secrets.PUSHPLUSTOPIC }}
  Ray_Serilog__WriteTo__9__Args__channel: ${{ secrets.PUSHPLUSCHANNEL }}
  Ray_Serilog__WriteTo__9__Args__webhook: ${{ secrets.PUSHPLUSWEBHOOK }}
  Ray_Serilog__WriteTo__9__Args__restrictedToMinimumLevel: ${{ secrets.PUSHPLUSLEVEL }}
  # 安全相关：
  Ray_Security__IsSkipDailyTask: ${{ secrets.ISSKIPDAILYTASK }}
  Ray_Security__IntervalSecondsBetweenRequestApi: ${{ secrets.INTERVALSECONDSBETWEENREQUESTAPI }}
  Ray_Security__IntervalMethodTypes: ${{ secrets.INTERVALMETHODTYPES }}
  Ray_Security__UserAgent: ${{ secrets.USERAGENT }}
  Ray_Security__WebProxy: ${{ secrets.WEBPROXY }}
  Ray_Security__RandomSleepMaxMin: ${{ secrets.RANDOMSLEEPMAXMIN }}
  # 每日任务：
  Ray_DailyTaskConfig__NumberOfCoins: ${{ secrets.NUMBEROFCOINS }}
  Ray_DailyTaskConfig__SaveCoinsWhenLv6: ${{ secrets.SAVECOINSWHENLV6 }}
  Ray_DailyTaskConfig__SelectLike: ${{ secrets.SELECTLIKE }}
  Ray_DailyTaskConfig__SupportUpIds: ${{ secrets.SUPPORTUPIDS }}
  Ray_DailyTaskConfig__DayOfAutoCharge: ${{ secrets.DAYOFAUTOCHARGE }}
  Ray_DailyTaskConfig__AutoChargeUpId: ${{ secrets.AUTOCHARGEUPID }}
  Ray_DailyTaskConfig__ChargeComment: ${{ secrets.CHARGECOMMENT }}
  Ray_DailyTaskConfig__DayOfReceiveVipPrivilege: ${{ secrets.DAYOFRECEIVEVIPPRIVILEGE }}
  Ray_DailyTaskConfig__DayOfExchangeSilver2Coin: ${{ secrets.DAYOFEXCHANGESILVER2COIN }}
  Ray_DailyTaskConfig__DevicePlatform: ${{ secrets.DEVICEPLATFORM }}
  Ray_Serilog__WriteTo__0__Args__restrictedToMinimumLevel: ${{ secrets.CONSOLELOGLEVEL }}
  Ray_Serilog__WriteTo__0__Args__outputTemplate: ${{ secrets.CONSOLELOGTEMPLATE }}

jobs:
  pre-check:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.check.outputs.result }} # 不能直接传递secrets的值，否则会被skip，需要转一下
    steps:
      - id: check
        if: env.IsOpenDailyTask=='true'
        run: |
          echo "::set-output name=result::开启"

  run-daily-task:
    runs-on: ubuntu-latest

    steps:
      # 设置服务器时区为东八区
      - name: Set time zone
        run: sudo timedatectl set-timezone 'Asia/Shanghai'

      # 检出代码
      - name: Checkout
        uses: actions/checkout@v2

      # 设置 JDK 1.8
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Python dependencies and Test App
        run: |
          python -m pip install --upgrade pip
          pip install requests cryptography resend exchangelib msal
          python bing.py && python git.py

      # 缓存 Maven 仓库
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 设置 .NET 环境
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: Build with Maven
        env:
          BILI_JCT: ${{ secrets.BILI_JCT }}
          DEDEUSERID: ${{ secrets.DEDEUSERID }}
          SESSDATA: ${{ secrets.SESSDATA }}
          SCKEY: ${{ secrets.SCKEY }}
          TELEGRAMBOTTOKEN: ${{ secrets.TELEGRAMBOTTOKEN }}
          TELEGRAMCHATID: ${{ secrets.TELEGRAMCHATID }}
          TZ: Asia/Shanghai
        run: |
          mvn compile exec:java -Dexec.mainClass="top.misec.Main" -Dexec.args="${DEDEUSERID} ${SESSDATA} ${BILI_JCT} ${SCKEY} ${TELEGRAMBOTTOKEN} ${TELEGRAMCHATID}"

      - name: Test APP
        run: |
          # 1. 安装 jq 以便解析 API 响应
          sudo apt-get install jq

          # 2. 从 GitHub API 获取最新的 Release 信息
          LATEST_RELEASE_INFO=$(curl -s "https://api.github.com/repos/RayWangQvQ/BiliBiliToolPro/releases/latest")

          # 3. 确定运行环境对应的系统和架构
          # GitHub Actions 的 runner.os 会返回 Linux, Windows, macOS
          # BiliBiliToolPro 的命名使用 linux, win, osx
          if [ "${{ runner.os }}" == "Linux" ]; then
            TARGET_OS="linux"
          elif [ "${{ runner.os }}" == "Windows" ]; then
            TARGET_OS="win"
          elif [ "${{ runner.os }}" == "macOS" ]; then
            TARGET_OS="osx"
          fi
          
          # runner.arch 返回 X64, ARM64 等
          # BiliBiliToolPro 的命名使用 x64, arm64
          TARGET_ARCH=$(echo "${{ runner.arch }}" | tr '[:upper:]' '[:lower:]')

          # 4. 构造期望的二进制文件名并从API响应中获取下载链接
          # 例: bilibili-tool-pro-v1.0.0-linux-x64.zip
          ASSET_NAME_PATTERN="bilibili-tool-pro-v.*-${TARGET_OS}-${TARGET_ARCH}.zip"
          DOWNLOAD_URL=$(echo "$LATEST_RELEASE_INFO" | jq -r ".assets[] | select(.name | test(\"$ASSET_NAME_PATTERN\")) | .browser_download_url")

          if [ -z "$DOWNLOAD_URL" ]; then
            echo "错误：无法找到适用于 ${{ runner.os }} (${TARGET_OS}) / ${{ runner.arch }} (${TARGET_ARCH}) 的最新版本。"
            exit 1
          fi

          DOWNLOAD_FILE=$(basename "$DOWNLOAD_URL")
          EXTRACT_DIR="${TARGET_OS}-${TARGET_ARCH}"
          
          echo "检测到最新版本，正在下载: $DOWNLOAD_URL"

          # 5. 下载并解压最新的 BiliBiliToolPro 程序包
          wget "$DOWNLOAD_URL"
          unzip "$DOWNLOAD_FILE"
          cd "./${EXTRACT_DIR}/"
          
          # 6. 将原本的 appsettings.json 文件移动到解压后的文件夹中
          # 注意：请确保此路径在您的项目中是正确的
          cp ../src/Ray.BiliBiliTool.Console/appsettings.json .
          
          # 7. 赋予执行权限并运行每日任务
          chmod +x Ray.BiliBiliTool.Console
          ./Ray.BiliBiliTool.Console --runTasks=Daily