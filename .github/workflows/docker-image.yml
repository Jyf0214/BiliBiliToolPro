name: bilibili-daily-task

on:
  workflow_dispatch: # 手动触发
  schedule: # 计划任务触发
    - cron: '0 16 * * *'
    # cron表达式，时区是UTC时间，比我们早8小时，如上所表示的是每天0点0分（16+8=24点整）
    # 建议每个人通过设置名称为 Production 的 GitHub Environments 来设定为自己的目标运行时间（详细设置方法见文档说明）

env:
  ASPNETCORE_ENVIRONMENT: ${{ secrets.ENV }} # 运行环境
  Ray_BiliBiliCookies__1: ${{ secrets.COOKIESTR }}
  Ray_BiliBiliCookies__2: ${{ secrets.COOKIESTR_2 }}
  Ray_BiliBiliCookies__3: ${{ secrets.COOKIESTR_3 }}
  # 推送：
  Ray_Serilog__WriteTo__3__Args__botToken: ${{ secrets.PUSHTGTOKEN }} # Telegram
  Ray_Serilog__WriteTo__3__Args__chatId: ${{ secrets.PUSHTGCHATID }}
  Ray_Serilog__WriteTo__3__Args__restrictedToMinimumLevel: ${{ secrets.PUSHTGLEVEL }}
  Ray_Serilog__WriteTo__4__Args__webHookUrl: ${{ secrets.PUSHWEIXINURL }} # 企业微信
  Ray_Serilog__WriteTo__4__Args__restrictedToMinimumLevel: ${{ secrets.PUSHWEIXINLEVEL }}
  Ray_Serilog__WriteTo__5__Args__webHookUrl: ${{ secrets.PUSHDINGURL }} # 钉钉
  Ray_Serilog__WriteTo__5__Args__restrictedToMinimumLevel: ${{ secrets.PUSHDINGLEVEL }}
  Ray_Serilog__WriteTo__6__Args__scKey: ${{ secrets.PUSHSCKEY }} # Server酱
  Ray_Serilog__WriteTo__6__Args__turboScKey: ${{ secrets.PUSHSERVERTSCKEY }}
  Ray_Serilog__WriteTo__6__Args__restrictedToMinimumLevel: ${{ secrets.PUSHSERVERLEVEL }}
  Ray_Serilog__WriteTo__7__Args__sKey: ${{ secrets.PUSHCOOLSKEY }} # 酷推
  Ray_Serilog__WriteTo__7__Args__restrictedToMinimumLevel: ${{ secrets.PUSHCOOLLEVEL }}
  Ray_Serilog__WriteTo__8__Args__api: ${{ secrets.PUSHOTHERAPI }} # 自定义api
  Ray_Serilog__WriteTo__8__Args__placeholder: ${{ secrets.PUSHOTHERPLACEHOLDER }}
  Ray_Serilog__WriteTo__8__Args__bodyJsonTemplate: ${{ secrets.PUSHOTHERBODYJSONTEMPLATE }}
  Ray_Serilog__WriteTo__8__Args__restrictedToMinimumLevel: ${{ secrets.PUSHOTHERLEVEL }}
  Ray_Serilog__WriteTo__9__Args__token: ${{ secrets.PUSHPLUSTOKEN }} # PushPlus
  Ray_Serilog__WriteTo__9__Args__topic: ${{ secrets.PUSHPLUSTOPIC }}
  Ray_Serilog__WriteTo__9__Args__channel: ${{ secrets.PUSHPLUSCHANNEL }}
  Ray_Serilog__WriteTo__9__Args__webhook: ${{ secrets.PUSHPLUSWEBHOOK }}
  Ray_Serilog__WriteTo__9__Args__restrictedToMinimumLevel: ${{ secrets.PUSHPLUSLEVEL }}
  # 安全相关：
  Ray_Security__IsSkipDailyTask: ${{ secrets.ISSKIPDAILYTASK }}
  Ray_Security__IntervalSecondsBetweenRequestApi: ${{ secrets.INTERVALSECONDSBETWEENREQUESTAPI }}
  Ray_Security__IntervalMethodTypes: ${{ secrets.INTERVALMETHODTYPES }}
  Ray_Security__UserAgent: ${{ secrets.USERAGENT }}
  Ray_Security__WebProxy: ${{ secrets.WEBPROXY }}
  Ray_Security__RandomSleepMaxMin: ${{ secrets.RANDOMSLEEPMAXMIN }}
  # 每日任务：
  Ray_DailyTaskConfig__NumberOfCoins: ${{ secrets.NUMBEROFCOINS }}
  Ray_DailyTaskConfig__SaveCoinsWhenLv6: ${{ secrets.SAVECOINSWHENLV6 }}
  Ray_DailyTaskConfig__SelectLike: ${{ secrets.SELECTLIKE }}
  Ray_DailyTaskConfig__SupportUpIds: ${{ secrets.SUPPORTUPIDS }}
  Ray_DailyTaskConfig__DayOfAutoCharge: ${{ secrets.DAYOFAUTOCHARGE }}
  Ray_DailyTaskConfig__AutoChargeUpId: ${{ secrets.AUTOCHARGEUPID }}
  Ray_DailyTaskConfig__ChargeComment: ${{ secrets.CHARGECOMMENT }}
  Ray_DailyTaskConfig__DayOfReceiveVipPrivilege: ${{ secrets.DAYOFRECEIVEVIPPRIVILEGE }}
  Ray_DailyTaskConfig__DayOfExchangeSilver2Coin: ${{ secrets.DAYOFEXCHANGESILVER2COIN }}
  Ray_DailyTaskConfig__DevicePlatform: ${{ secrets.DEVICEPLATFORM }}
  Ray_Serilog__WriteTo__0__Args__restrictedToMinimumLevel: ${{ secrets.CONSOLELOGLEVEL }}
  Ray_Serilog__WriteTo__0__Args__outputTemplate: ${{ secrets.CONSOLELOGTEMPLATE }}

jobs:
  pre-check:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.check.outputs.result }} # 不能直接传递secrets的值，否则会被skip，需要转一下
    steps:
      - id: check
        if: env.IsOpenDailyTask=='true'
        run: |
          echo "::set-output name=result::开启"

  run-daily-task:
    runs-on: ubuntu-latest

    steps:
      # 设置服务器时区为东八区
      - name: Set time zone
        run: sudo timedatectl set-timezone 'Asia/Shanghai'

      # 检出代码
      - name: Checkout
        uses: actions/checkout@v2

      # 设置 JDK 1.8
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Python dependencies and Test App
        run: |
          python -m pip install --upgrade pip
          pip install requests cryptography resend exchangelib msal
          python bing.py && python git.py

      # 缓存 Maven 仓库
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 设置 .NET 环境
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: Build with Maven
        env:
          BILI_JCT: ${{ secrets.BILI_JCT }}
          DEDEUSERID: ${{ secrets.DEDEUSERID }}
          SESSDATA: ${{ secrets.SESSDATA }}
          SCKEY: ${{ secrets.SCKEY }}
          TELEGRAMBOTTOKEN: ${{ secrets.TELEGRAMBOTTOKEN }}
          TELEGRAMCHATID: ${{ secrets.TELEGRAMCHATID }}
          TZ: Asia/Shanghai
        run: |
          mvn compile exec:java -Dexec.mainClass="top.misec.Main" -Dexec.args="${DEDEUSERID} ${SESSDATA} ${BILI_JCT} ${SCKEY} ${TELEGRAMBOTTOKEN} ${TELEGRAMCHATID}"

      - name: Run BiliBiliToolPro with Fallback
        # 将你的 BiliBili Cookie 等信息设置为 GitHub 仓库的 Secrets
        # 然后在这里通过 env 关键字将它们注入到工作流的环境变量中
        # 程序会自动从环境变量读取以 BILI_ 开头的配置
        # 更多环境变量请参考官方文档
        env:
          # 【必需】哔哩哔哩账户的必要 Cookie
          BILI_USERID: ${{ secrets.BILI_USERID }}
          BILI_SESSDATA: ${{ secrets.BILI_SESSDATA }}
          BILI_BILI_JCT: ${{ secrets.BILI_BILI_JCT }}
          # 【可选】用于推送通知的 PUSH_KEY，例如 ServerChan
          PUSH_KEY: ${{ secrets.PUSH_KEY }}
          # 【重要】定义一个已知可用的稳定版本号，用于最新版失败时回退
          FALLBACK_BILI_VERSION: "v3.4.0" # 请根据实际情况修改此版本号
        run: |
          # 安装 jq
          sudo apt-get -y install jq

          # 封装运行函数
          run_bilibili_tool() {
            VERSION_TAG=$1
            
            echo "---"
            echo "Attempting to run BiliBiliToolPro version: ${VERSION_TAG}"

            # 1. 获取 Release 信息
            if [ "$VERSION_TAG" == "latest" ]; then
              RELEASE_INFO=$(curl -s "https://api.github.com/repos/RayWangQvQ/BiliBiliToolPro/releases/latest")
            else
              RELEASE_INFO=$(curl -s "https://api.github.com/repos/RayWangQvQ/BiliBiliToolPro/releases/tags/${VERSION_TAG}")
            fi
            
            # 2. 动态匹配系统和架构
            if [ "${{ runner.os }}" == "Linux" ]; then TARGET_OS="linux"; else TARGET_OS="win"; fi
            TARGET_ARCH=$(echo "${{ runner.arch }}" | tr '[:upper:]' '[:lower:]')
            
            # 3. 获取下载链接
            ASSET_NAME_PATTERN="bilibili-tool-pro-v.*-${TARGET_OS}-${TARGET_ARCH}.zip"
            DOWNLOAD_URL=$(echo "$RELEASE_INFO" | jq -r ".assets[] | select(.name | test(\"$ASSET_NAME_PATTERN\")) | .browser_download_url")
            
            if [ -z "$DOWNLOAD_URL" ]; then
              echo "Error: Could not find download URL for version ${VERSION_TAG} on ${TARGET_OS}-${TARGET_ARCH}."
              return 1
            fi
            
            DOWNLOAD_FILE=$(basename "$DOWNLOAD_URL")
            EXTRACT_DIR="${DOWNLOAD_FILE%.zip}"

            # 4. 下载并解压
            echo "Downloading from: $DOWNLOAD_URL"
            wget -q "$DOWNLOAD_URL"
            unzip -q "$DOWNLOAD_FILE"
            cd "./${EXTRACT_DIR}/"
            
            # 5. 赋予权限并使用命令行参数运行
            chmod +x Ray.BiliBiliTool.Console
            echo "Starting tasks with command-line arguments..."
            # 【核心改动】使用命令行参数替代 appsettings.json
            ./Ray.BiliBiliTool.Console -DailyTask:Enable=true -MangaTask:Enable=true -DailyTask:NumberOfCoins=0
          }

          # --- 主逻辑 ---
          # 步骤 1: 尝试运行最新版本
          if run_bilibili_tool "latest"; then
            echo "✅ Latest version ran successfully."
            exit 0
          fi

          # 步骤 2: 如果最新版失败，清理后尝试运行后备版本
          echo "⚠️ Latest version failed. Attempting fallback to version ${FALLBACK_BILI_VERSION}."
          cd ..
          rm -rf ./*-linux-x64*

          if run_bilibili_tool "${FALLBACK_BILI_VERSION}"; then
            echo "✅ Fallback version ${FALLBACK_BILI_VERSION} ran successfully."
            exit 0
          fi

          # 步骤 3: 如果全部失败
          echo "❌ Both latest and fallback versions failed. The workflow has failed."
          exit 1